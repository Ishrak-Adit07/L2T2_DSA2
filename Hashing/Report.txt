

                 |                              |                Hash1               |               Hash2
 Hash Table Size |  Collision Resolution Method |____________________________________|___________________________________
                 |                              | #NumberOfCollsions | AverageProbes | #NumberOfCollsions | AverageProbes
_________________|______________________________|____________________________________|___________________________________

   5003                   Chaining                       5660             3.018                5720             3.107          

   5003                Double Hashing                    6605             1.244                6678             1.158          

   5003                Custom Probing                    6626             1.09                6646             1.04          

_________________|______________________________|____________________________________|___________________________________


                 |                              |                Hash1               |               Hash2
 Hash Table Size |  Collision Resolution Method |____________________________________|___________________________________
                 |                              | #NumberOfCollsions | AverageProbes | #NumberOfCollsions | AverageProbes
_________________|______________________________|____________________________________|___________________________________

   10007                   Chaining                       3698             2.074                3641             2.002          

   10007                Double Hashing                    4351             1.216                4306             1.192          

   10007                Custom Probing                    4337             1.18                4292             1.132          

_________________|______________________________|____________________________________|___________________________________


                 |                              |                Hash1               |               Hash2
 Hash Table Size |  Collision Resolution Method |____________________________________|___________________________________
                 |                              | #NumberOfCollsions | AverageProbes | #NumberOfCollsions | AverageProbes
_________________|______________________________|____________________________________|___________________________________

   20011                   Chaining                       2136             1.486                2178             1.491          

   20011                Double Hashing                    2407             1.155                2469             1.185          

   20011                Custom Probing                    2414             1.157                2434             1.179          

_________________|______________________________|____________________________________|___________________________________




HashFunction Report

class HashFunctions{
    int sizeOfTable;
public:
    HashFunctions() {}
    HashFunctions(int S){
        sizeOfTable = S;
    }

    void setSizeOfTable(int S){
        sizeOfTable = S;
    }

    int HashDivision(int key){
        int modValueForDivision = 5;
        return key%modValueForDivision;
    }

    int HashMidSquare(int key){
        int numberOfMidDigits = ceil(log10(sizeOfTable));

        int squareOfKey = key*key;
        int lenOfSquare = ceil(log10(squareOfKey));
        int midEnd = ( lenOfSquare/2 ) + 1;
        midEnd = lenOfSquare-midEnd;

        midEnd = ceil(pow(10, midEnd));
        squareOfKey = squareOfKey/midEnd;
        numberOfMidDigits = ceil(pow(10, numberOfMidDigits));

        return squareOfKey%numberOfMidDigits;
    }

    int HashDigitFold(int key){
        int lenOfKey = ceil(log10(key));
        
        int numberOfStartDigits = ceil(log10(sizeOfTable));
        int divider = ceil(pow(10, lenOfKey-numberOfStartDigits));

        int hashValue = 0;
        while(divider){
            hashValue += key/divider;
            key = key%divider;
            divider = divider/ceil(pow(10,numberOfStartDigits));
        }hashValue+=key;

        return hashValue;
    }

    int HashMuliplication(int key){
        double multiplicationConst = .05;
        double fullPart = key*multiplicationConst;
        int intPart = fullPart;
        double fractionPart = fullPart - intPart;
        return floor( sizeOfTable * fractionPart);
    }

    //***************************************************************************************
    int HashPolynomialString(string str){
        int xconstant = 31;
        long long int powerOfxConstant = 1;
        int hashValue = 0;

        for(char c: str){
            hashValue = ( hashValue + (c-'a'+1)*powerOfxConstant ) % sizeOfTable;
            powerOfxConstant = (powerOfxConstant*xconstant) % sizeOfTable;
        }

        return hashValue;
    }

    //***************************************************************************************
    int HashPolynomialString2(string str){
        int xconstant = 7;
        long long int powerOfxConstant = 1;
        int hashValue = 0;

        for(char c: str){
            hashValue >>= 2;
            hashValue = ( hashValue + (c-'a'+1)*powerOfxConstant ) % sizeOfTable;
            powerOfxConstant = (powerOfxConstant*xconstant) % sizeOfTable;
        }

        return hashValue;
    }

    //***************************************************************************************
    int HashPolynomialStringaux(string str){
        int xconstant = 37;
        long long int powerOfxConstant = 1;
        int hashValue = 0;

        for(char c: str){
            hashValue >>= 4;
            hashValue = ( hashValue + (c-'a'+1)*powerOfxConstant ) % sizeOfTable;
            powerOfxConstant = (powerOfxConstant*xconstant) % sizeOfTable;
        }

        return hashValue;
    }
};